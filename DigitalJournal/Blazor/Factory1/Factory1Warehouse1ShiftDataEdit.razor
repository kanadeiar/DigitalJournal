@page "/factory1/warehouse1/edit/{id:int}"
@page "/factory1/warehouse1/create"
@inherits OwningComponentBase<DigitalJournalContext>
@inject NavigationManager NavManager

<PageTitle>@Mode - Завод 1</PageTitle>

<link href="/css/BlazorValidation.css" rel="stylesheet" />

<div class="row">
    <div class="col-md-4 col-lg-3 mb-1">
        <_Factory1LeftSidebarPartial />
    </div>
    <div class="col-md-8 col-lg-9 mb-1">
        <div class="border-1 bg-light shadow rounded-1 p-2">



            <h1 class="my-2 p-2 bg-@Theme text-@TextColor">@Mode</h1>

            <div>
                <NavLink class="btn btn-secondary" href="factory1/warehouse1">Назад</NavLink>
            </div>

            @if (Data is null)
            {
                <div class="row">
                    <div class="p-5 text-center">Загрузка ...</div>
                </div>
            }
            else
            {
                <EditForm Model="Data" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator/>

                    <div>
                        <label>Дата начала смены</label>
                        <ValidationMessage For="@(() => Data.Time)" />
                        <InputDate class="form-control" @bind-Value="Data.Time" />
                    </div>
                    <div>
                        <label>Время начала смены</label>
                        <ValidationMessage For="@(() => Data.Time)" />
                        <input type="time" class="form-control" @bind="Data.Time" />
                    </div>
                    <div>
                        <label>Объем песка в баке № 1</label>
                        <ValidationMessage For="@(() => Data.Tank1LooseRawValue)" />
                        <InputNumber class="form-control" @bind-Value="Data.Tank1LooseRawValue" />
                    </div>
                    <div>
                        <label>Объем песка в баке № 2</label>
                        <ValidationMessage For="@(() => Data.Tank2LooseRawValue)" />
                        <InputNumber class="form-control" @bind-Value="Data.Tank2LooseRawValue" />
                    </div>
                    <div>
                        <label>Объем песка в баке № 3</label>
                        <ValidationMessage For="@(() => Data.Tank3LooseRawValue)" />
                        <InputNumber class="form-control" @bind-Value="Data.Tank3LooseRawValue" />
                    </div>
                    <div>
                        <label>Смена</label>
                        <ValidationMessage For="@(() => Data.Factory1ShiftId)" />
                        <InputSelect class="form-select" @bind-Value="Data.Factory1ShiftId">
                            <option selected value="0" disabled="disabled">Выберите смену</option>
                            @foreach (var item in Factory1Shifts.Keys)
                            {
                                <option value="@item">@Factory1Shifts[item]</option>
                            }
                        </InputSelect>
                    </div>
                    <div>
                        <label>Кладовщик</label>
                        <ValidationMessage For="@(() => Data.ProfileId)" />
                        <InputSelect class="form-select" @bind-Value="Data.ProfileId">
                            <option selected value="null" disabled="disabled">Выберите кладовщика</option>
                            @foreach (var item in Profiles.Keys)
                            {
                                <option value="@item">@Profiles[item]</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="btn btn-@Theme">Сохранить</button>
                    </div>
                </EditForm>
            }



        </div>
    </div>
</div>


@code {
    DigitalJournalContext _Context => Service;


    [Parameter]
    public int Id { get; set; }
    public bool IsModeCreate => Id == 0;
    public Factory1Warehouse1ShiftData? Data { get; set; }
    public IDictionary<int, string> Factory1Shifts { get; set; } = new Dictionary<int, string>();
    public IDictionary<int, string> Profiles { get; set; } = new Dictionary<int, string>();

    protected override async Task OnParametersSetAsync()
    {
        if (IsModeCreate)
        {
            Data = new Factory1Warehouse1ShiftData();
            if (DateTime.Now.Hour < 8)
                Data.Time = DateTime.Today.AddHours(-4);
            else
                Data.Time = DateTime.Today.AddHours(8);
        }
        else
            Data = await _Context.Factory1Warehouse1ShiftData.FindAsync(Id);
        Factory1Shifts = await _Context
            .Factory1Shifts.ToDictionaryAsync(s => s.Id, s => s.Name);
        Profiles = await _Context
            .Profiles.ToDictionaryAsync(x => x.Id, x => $"{x.SurName} {x.FirstName.FirstOrDefault()}.{x.Patronymic.FirstOrDefault()}.");
    }

    public async Task HandleValidSubmit()
    {
        if (IsModeCreate && Data is { })
        {




            _Context.Add(Data);
        }
        await _Context.SaveChangesAsync();





        NavManager.NavigateTo("factory1/warehouse1");
    }

    public string Mode => IsModeCreate ? "Добавление данных за смену" : "Редактирование данных за смену";
    public string Theme => IsModeCreate ? "success" : "info";
    public string TextColor => IsModeCreate ? "white" : "dark";
}
